<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:tocPath="Web Developer's Reference|How to..." MadCap:InPreviewMode="false" MadCap:PreloadImages="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" lang="en-us" xml:lang="en-us" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge" xmlns="" />
        <link href="../SkinSupport/Slideshow.css" rel="stylesheet" type="text/css" />
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" type="text/css" />
        <link href="../Resources/TableStyles/Code.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <meta name="template" content="SalesLogixFooterHelpLink.htt" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="copyright" content="" />
        <meta name="topic-comment" content="040210 lrw new." />
        <meta name="generator" content="Adobe RoboHelp 10" /><title>Enabling Check for Duplicates for an Entity</title>
        <link href="../Resources/Stylesheets/SALESLOGIX.CSS" rel="stylesheet" type="text/css" />
        <script src="../SkinSupport/jquery.min.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapTopicAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <h1>Enabling Check for Duplicates for an Entity</h1>
        <p>The Check for Duplicates wizard in the Saleslogix Web Client 
 checks for duplicate accounts, contacts, and leads. This help topic explains 
 how to add other entities including custom entities to the wizard.</p>
        <p>For general information on the de-duplication functionality and the 
 wizard, refer to the help topic, "Using Check for Duplicates.</p>
        <p class="Infinitive">To enable</p>
        <ol>
            <li value="1">Create 
	 a custom provider by developing an external assembly. <a href="javascript:void(0);" onclick="FMCToggler( this ); return false;" class="MCToggler_0" MadCap:targets="1">Tell me more...<img style="border: none;margin-left: 5px;" src="../SkinSupport/DropDownClosed.gif" MadCap:altsrc="../SkinSupport/DropDownOpen.gif" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../SkinSupport/DropDownOpen.gif' ); }" alt="Closed" MadCap:alt2="Open" class="MCTogglerIcon" xmlns="" /></a> <ol MadCap:targetName="1" xmlns="http://www.w3.org/1999/xhtml" style="display: none;"><li value="1">Use 
			 Visual studio 2008/2010 to create a new class library project. 
			 Ensure that the project targets .NET 3.5 so that it is compatible 
			 with the Web Client platform.
                    </li><li value="2">Add 
			 the following Saleslogix
			 references to the project from the Saleslogix Web Client
			 output folder:
                        <ul><li value="1">Sage.Entity.Interfaces
                            </li><li value="2">Sage.Platform
                            </li><li value="3">Sage.SalesLogix.Services.PotentialMatch
                            </li></ul></li><li value="3">Sub-class 
			 MatchDuplicateProvider. &#160;For example, for a contact duplicate 
			 provider:<br /> <table style="vertical-align: top;margin-left: 80px;mc-table-style: url('../Resources/TableStyles/Code.css');" cellspacing="0" width="61.43%" bgcolor="#EEEEEE" class="TableStyle-Code"><col style="width: 100%;" class="TableStyle-Code-Column-Column1" /><tr style="vertical-align: top;" class="TableStyle-Code-Body-Body1"><td style="border: Solid 1px #000000; width: 100%; padding-right: 10px;        padding-left: 10px;" class="TableStyle-Code-BodyD-Column1-Body1"><p class="code-snippet">public 
				 class ContactDuplicateProvider : MatchDuplicateProvider</p><p class="code-snippet" style="margin-left: 64px;">{</p><p class="code-snippet" style="margin-left: 64px;">}</p></td></tr></table><br /></li><li value="4">Add 
			 private storage for the match choices. For our purposes you 
			 can think of the custom match duplicate provider as a custom 
			 property bag that stores the enabled state of different match 
			 components. For example, within a contact match we may also 
			 want to search leads. It is within the provider where we enable 
			 the user-interface the ability to display those choices. For 
			 example, to allow for matching contacts and leads:<br /> <table style="vertical-align: top;margin-left: 80px;mc-table-style: url('../Resources/TableStyles/Code.css');" cellspacing="0" width="61.43%" bgcolor="#EEEEEE" class="TableStyle-Code"><col style="width: 100%;" class="TableStyle-Code-Column-Column1" /><tr style="vertical-align: top;" class="TableStyle-Code-Body-Body1"><td style="border: Solid 1px #000000; width: 100%; padding-right: 10px;        padding-left: 10px;" class="TableStyle-Code-BodyD-Column1-Body1"><p class="code-snippet" style="margin-left: 64px;">private 
				 bool _searchContact = true;</p><p class="code-snippet" style="margin-left: 64px;">private 
				 bool _searchLead = true;</p></td></tr></table></li> <li value="5">Add 
			 a constructor to set the defaults and initialize the base 
			 MatchDuplicateProvider. For example:<br /> <table style="vertical-align: top;margin-left: 80px;mc-table-style: url('../Resources/TableStyles/Code.css');" cellspacing="0" width="61.43%" bgcolor="#EEEEEE" class="TableStyle-Code"><col style="width: 100%;" class="TableStyle-Code-Column-Column1" /><tr style="vertical-align: top;" class="TableStyle-Code-Body-Body1"><td style="border: Solid 1px #000000; width: 100%; padding-right: 10px;        padding-left: 10px;" class="TableStyle-Code-BodyD-Column1-Body1"><p class="code-snippet" style="margin-left: 64px;">/// 
				 &lt;summary&gt;</p><p class="code-snippet" style="margin-left: 64px;">/// 
				 Initializes a new instance of the &lt;see cref="ContactDuplicateProvider"/&gt; 
				 class.</p><p class="code-snippet" style="margin-left: 64px;">/// 
				 &lt;/summary&gt;</p><p class="code-snippet" style="margin-left: 64px;">public 
				 ContactDuplicateProvider(): base(typeof(IContact), "IContact")</p><p class="code-snippet" style="margin-left: 64px;">{</p><p class="code-snippet" style="margin-left: 64px;">_searchContact 
				 = true;</p><p class="code-snippet" style="margin-left: 64px;">_searchLead 
				 = false;</p><p class="code-snippet" style="margin-left: 64px;">&#160;&#160;&#160;&#160;&#160;&#160;&#160;SetTargetActive(typeof(ILead), 
				 _searchLead);</p><p class="code-snippet" style="margin-left: 64px;">&#160;&#160;&#160;&#160;&#160;&#160;&#160;SetTargetActive(typeof(IContact), 
				 _searchContact);</p><p class="code-snippet" style="margin-left: 64px;">}</p></td></tr></table></li><li value="6">Finally, 
			 add properties for both the search contact and lead. For example:<br /> <table style="vertical-align: top;margin-left: 80px;mc-table-style: url('../Resources/TableStyles/Code.css');" cellspacing="0" width="61.43%" bgcolor="#EEEEEE" class="TableStyle-Code"><col style="width: 100%;" class="TableStyle-Code-Column-Column1" /><tr style="vertical-align: top;" class="TableStyle-Code-Body-Body1"><td style="border: Solid 1px #000000; width: 100%; padding-right: 10px;        padding-left: 10px;" class="TableStyle-Code-BodyD-Column1-Body1"><p class="code-snippet" style="margin-left: 64px;">public 
				 bool SearchContact</p><p class="code-snippet" style="margin-left: 64px;">{</p><p class="code-snippet" style="margin-left: 64px;">get 
				 { return _searchContact; }</p><p class="code-snippet" style="margin-left: 64px;">set</p><p class="code-snippet" style="margin-left: 64px;">&#160;&#160;&#160;&#160;&#160;&#160;&#160;{</p><p class="code-snippet" style="margin-left: 64px;">&#160;&#160;&#160;&#160;&#160;&#160;&#160;_searchContact 
				 = value;</p><p class="code-snippet" style="margin-left: 64px;">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SetTargetActive(typeof(IContact), 
				 _searchContact);</p><p class="code-snippet" style="margin-left: 64px;">}</p><p class="code-snippet" style="margin-left: 64px;">}</p><p class="code-snippet" style="margin-left: 64px;">public 
				 bool SearchLead</p><p class="code-snippet" style="margin-left: 64px;">{</p><p class="code-snippet" style="margin-left: 64px;">get 
				 { return _searchLead; }</p><p class="code-snippet" style="margin-left: 64px;">set</p><p class="code-snippet" style="margin-left: 64px;">&#160;&#160;&#160;&#160;&#160;&#160;&#160;{</p><p class="code-snippet" style="margin-left: 64px;">&#160;&#160;&#160;&#160;&#160;&#160;&#160;_searchLead 
				 = value;</p><p class="code-snippet" style="margin-left: 64px;">SetTargetActive(typeof(ILead), 
				 _searchLead);</p><p class="code-snippet" style="margin-left: 64px;">}</p><p class="code-snippet" style="margin-left: 64px;">}</p></td></tr></table></li><br /><li value="7">Verify 
			 the final class looks like this:<br /> <table style="vertical-align: top;margin-left: 80px;mc-table-style: url('../Resources/TableStyles/Code.css');" cellspacing="0" width="61.43%" bgcolor="#EEEEEE" class="TableStyle-Code"><col style="width: 100%;" class="TableStyle-Code-Column-Column1" /><tr style="vertical-align: top;" class="TableStyle-Code-Body-Body1"><td style="border: Solid 1px #000000; width: 100%; padding-right: 10px;        padding-left: 10px;" class="TableStyle-Code-BodyD-Column1-Body1"><p class="Topic-Text-Indent">public 
				 class ContactDuplicateProvider : MatchDuplicateProvider</p><p class="Topic-Text-Indent">{</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;private 
				 bool _searchContact = true;</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;private 
				 bool _searchLead = true;</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;/// 
				 &lt;summary&gt;</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;/// 
				 Initializes a new instance of the &lt;see cref="ContactDuplicateProvider"/&gt; 
				 class.</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;/// 
				 &lt;/summary&gt;</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;public 
				 ContactDuplicateProvider()</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: 
				 base(typeof(IContact), "IContact")</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;{</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_searchContact 
				 = true;</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_searchLead 
				 = false;</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SetTargetActive(typeof(ILead), 
				 _searchLead);</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SetTargetActive(typeof(IContact), 
				 _searchContact);</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;}</p><p class="Topic-Text-Indent">  <![CDATA[ ]]></p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;public 
				 bool SearchContact</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;{</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;get 
				 { return _searchContact; }</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;set</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_searchContact 
				 = value;</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SetTargetActive(typeof(IContact), 
				 _searchContact);</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;}</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;public 
				 bool SearchLead</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;{</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;get 
				 { return _searchLead; }</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;set</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_searchLead 
				 = value;</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SetTargetActive(typeof(ILead), 
				 _searchLead);</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}</p><p class="Topic-Text-Indent">&#160;&#160;&#160;&#160;}</p><p class="Topic-Text-Indent">}</p></td></tr></table></li><li value="8">Compile the assembly and import 
			 it into the Project under SlxClient\Support Files\Bin.</li></ol></li>
            <li value="2">Make 
	 disk copies of the configuration files that are stored in the Virtual 
	 File System so you can edit them with Visual Studio. <a href="javascript:void(0);" onclick="FMCToggler( this ); return false;" class="MCToggler_0" MadCap:targets="2p;2ol">Tell 
	 me more...<img style="border: none;margin-left: 5px;" src="../SkinSupport/DropDownClosed.gif" MadCap:altsrc="../SkinSupport/DropDownOpen.gif" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../SkinSupport/DropDownOpen.gif' ); }" alt="Closed" MadCap:alt2="Open" class="MCTogglerIcon" xmlns="" /></a> <p class="Topic-Text-Indent" MadCap:targetName="2p" xmlns="http://www.w3.org/1999/xhtml" style="display: none;">Visual Studio provides error support 
		 if your XML becomes malformed. It is better to know if you have 
		 valid XML before you go through the compile/deploy test cycle.</p><ol MadCap:targetName="2ol" xmlns="http://www.w3.org/1999/xhtml" style="display: none;"><li value="1">In 
			 <span class="SLXBold">VFS Explorer</span> in Application Architect, 
			 expand Configuration &gt; Global. If the DeDupConfigurations.xml 
			 file does not exist, run Check for Duplicates in the Web Client 
			 to create the file.</li><li value="2">Right-click 
			 on the Global folder, point to <span class="SLXBold">Copy 
			 To....</span>, and choose a location on disk.</li></ol></li>
            <li value="3">Configure 
	 Speed Search and potential matching. <a href="javascript:void(0);" onclick="FMCToggler( this ); return false;" class="MCToggler_0" MadCap:targets="3">Tell me more...<img style="border: none;margin-left: 5px;" src="../SkinSupport/DropDownClosed.gif" MadCap:altsrc="../SkinSupport/DropDownOpen.gif" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../SkinSupport/DropDownOpen.gif' ); }" alt="Closed" MadCap:alt2="Open" class="MCTogglerIcon" xmlns="" /></a> <ol MadCap:targetName="3" xmlns="http://www.w3.org/1999/xhtml" style="display: none;"><li value="1">Enable 
			 Speed Search for any of the entities that de-duplicate matching 
			 needs to be executed on. Be sure to add indexes through the 
			 Speed Search management application. &#160;Refer to the Administrator 
			 help topic, “SpeedSearch” for more information.
                    </li><li value="2">Add 
			 the new Speed Search options to the disk copy of PotentialMatchConfiguration.xml 
			 with Visual Studio. Ensure that there is a MatchEntityIndexMap 
			 for any of your custom matches.
                    </li></ol></li>
            <li value="4">Configure 
				the de-duplication configuration file. <a href="javascript:void(0);" onclick="FMCToggler( this ); return false;" class="MCToggler_0" MadCap:targets="4">Tell 
				me more...<img style="border: none;margin-left: 5px;" src="../SkinSupport/DropDownClosed.gif" MadCap:altsrc="../SkinSupport/DropDownOpen.gif" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../SkinSupport/DropDownOpen.gif' ); }" alt="Closed" MadCap:alt2="Open" class="MCTogglerIcon" xmlns="" /></a><ol MadCap:targetName="4" style="display: none;"><li value="1">Open the disk copy of DeDupConfigurations.xml 
			 for edit with Visual Studio.<br /><br />			This file contains the settings for enabling your custom de-duplication 
			 provider.
                    </li><li value="2">For each provider you 
			 created, duplicate the DeDupJobConfigNode and change the following:<br /><table style="vertical-align: top;margin-left: 80px;mc-table-style: url('../Resources/TableStyles/Code.css');" cellspacing="0" width="87.68%" bgcolor="#EEEEEE" class="TableStyle-Code"><col style="width: 100%;" class="TableStyle-Code-Column-Column1" /><tr style="vertical-align: top;" class="TableStyle-Code-Body-Body1"><td style="border: Solid 1px #000000; width: 100%; padding-right: 10px;        padding-left: 10px;" class="TableStyle-Code-BodyD-Column1-Body1"><p class="code-snippet">&lt;DeDupJobConfig</p><p class="code-snippet">&#160;&#160;JobName="DeDupGroupJob.Contact"</p><p class="code-snippet">&#160;&#160;EntitySourceName="Contact"</p><p class="code-snippet">&#160;&#160;JobType="Sage.SalesLogix.Services.PotentialMatch.DeDupEntityJob, 
				 Sage.SalesLogix.Services.PotentialMatch, Version=7.7.0.1001, 
				 Culture=neutral, PublicKeyToken=null"</p><p class="code-snippet">&#160;&#160;EntitySourceType="Sage.Entity.Interfaces.IContact, 
				 Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, 
				 PublicKeyToken=null"</p><p class="code-snippet">&#160;&#160;MatchDuplicateProviderType="Sage.SalesLogix.Services.PotentialMatch.LeadDuplicateProvider, 
				 Sage.SalesLogix.Services.PotentialMatch, Version=7.7.0.1001, 
				 Culture=neutral, PublicKeyToken=null"&gt;</p><p class="code-snippet">&#160;&#160;&#160;&#160;&lt;DisplayName&gt;&lt;![CDATA[Contact]]&gt;&lt;/DisplayName&gt;</p><p class="code-snippet">&#160;&#160;&lt;/DeDupJobConfig&gt;</p></td></tr></table><ul MadCap:targetName="4ul"><li value="1">JobName 
				 - unique name for the job to be used for logging and display 
				 in the Check for Duplicates client web pages.
                            </li><li value="2">EntitySourceName 
				 - Pretty name of the entity source.
                            </li><li value="3">JobType 
				 - the type name of the specific DeDup job. It is best 
				 to copy this attribute value from an existing job configuration.
                            </li><li value="4">EntitySourceType 
				 - The type of entity that the DeDup job should be executed 
				 against.
                            </li><li value="5">MatchDuplicateProviderType 
				 - The type name of the custom match duplicate provider 
				 that was created in step 2.
                            </li><li value="6">DisplayName 
				 - Text to display in the Check for Duplicates wizard drop-down. 
				
                            </li></ul></li></ol></li>
            <li value="5">Copy 
	 the configuration files back to the Virtual File System. <a href="javascript:void(0);" onclick="FMCToggler( this ); return false;" class="MCToggler_0" MadCap:targets="5t;5ol">Tell 
	 me more...<img style="border: none;margin-left: 5px;" src="../SkinSupport/DropDownClosed.gif" MadCap:altsrc="../SkinSupport/DropDownOpen.gif" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../SkinSupport/DropDownOpen.gif' ); }" alt="Closed" MadCap:alt2="Open" class="MCTogglerIcon" xmlns="" /></a> <ol MadCap:targetName="5ol" xmlns="http://www.w3.org/1999/xhtml" style="display: none;"><li value="1">In 
			 <span class="SLXBold">VFS Explorer</span> in Application Architect, 
			 expand Configuration &gt; Global.
                    </li><li value="2">Right-click 
			 on the Global folder, point to <span class="SLXBold">Add Existing...</span>, 
			 browse to and select each disk copy.
                    </li></ol><table wrapperparagraphselector="P" style="margin-top: 14pt; margin-left: 40px; display: none;" cellspacing="0" width="98%" MadCap:targetName="5t" xmlns="http://www.w3.org/1999/xhtml"><col style="width: 5%;" /><col style="width: 95%;" /><tr><td style="width: 5%; vertical-align: TOP; padding-left: 6px;        padding-top: 6px; padding-right: 6px; padding-bottom: 6px;"><p style="text-align: center; margin-bottom: 0;"><img src="../Graphics/note.gif" alt="" style="border: none;" width="24" height="24" border="0" /></p></td><td style="width: 95%; vertical-align: TOP; padding-left: 6px;        padding-top: 6px; padding-right: 6px; padding-bottom: 6px;"><p>Tip: 
				 Also archive the XML segments in your external assembly. 
				 If the copy in the Virtual File System gets corrupted, 
				 the default configuration is used to create a new file 
				 the next time it is loaded, thus eliminating the changes. 
				 Having them centralized within the assembly will allow 
				 for easy location and repair.</p></td></tr></table></li>
        </ol>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>