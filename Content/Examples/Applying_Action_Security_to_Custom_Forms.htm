<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:comment="040210 lrw new." MadCap:tocPath="Web Developer's Reference|How to..." MadCap:InPreviewMode="false" MadCap:PreloadImages="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" lang="en-us" xml:lang="en-us" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <link href="../Resources/TableStyles/Code.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <meta name="copyright" content="" /><title>Applying Action Security to Custom Forms</title>
        <link href="../Resources/Stylesheets/SALESLOGIX.CSS" rel="stylesheet" type="text/css" />
        <script src="../SkinSupport/jquery.min.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
        <script src="../SkinSupport/MadCapTopicAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <h1><a name="kanchor44"></a>Applying Action Security to Custom Forms</h1>
        <p>Action Security is a way to control access to the functionality of user interface elements by user role. Refer to <MadCap:conditionalText MadCap:conditions="Links.NoLink_Text">"Understanding Secured Actions" in the Application Architect online Help</MadCap:conditionalText> for an overview of the feature.</p>
        <p>Action security can be applied to quick form elements through the use of the Applied Security property. Use the Role Security Service to apply action security to controls and events on custom forms.</p>
        <p>The Role Security Service provides verification to web items as to whether the current user has permission to perform a secured action. Secured Actions are organized by role and roles are associated with users. &#160;All the actions in all the roles that are associated to a user are built up into a cached list by the Role Security Service.</p>
        <p>The following procedure uses the AccountAssets quick form to demonstrate the elements required to apply action security to a custom form. The location of the generated form is at Model\deployment\webroot\common\SmartParts\Account\InsertAccount.ascx.</p>
        <p class="Infinitive">To apply</p>
        <ol>
            <li value="1">Determine the name of a secured action you want to apply to the form, for example, "ENTITIES/ACCOUNT/EDIT". You can view the list of secured actions on the Actions tab of the Role detail view in the Web Client.
            </li>
            <li value="2">Construct a role security service object for the current session to use to check if a user has access to an action.
           
    
        <table style="vertical-align: top;margin-left: auto;margin-right: auto;width: 98%;mc-table-style: url('../Resources/TableStyles/Code.css');" cellspacing="0" bgcolor="#EEEEEE" class="TableStyle-Code"><col style="width: 100%;" class="TableStyle-Code-Column-Column1" /><tr style="vertical-align: top;" class="TableStyle-Code-Body-Body1"><td style="border: Solid 1px #000000;width: 100%;padding-right: 10px;padding-left: 10px;" class="TableStyle-Code-BodyD-Column1-Body1"><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">&lt;script runat="server" type="text/C#"&gt;</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">/// &lt;summary&gt;</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">/// Gets or sets the role security service.</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">/// &lt;/summary&gt;</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">/// &lt;value&gt;The role security service.&lt;/value&gt;</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">[Sage.Platform.Application.ServiceDependency]</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">public Sage.Platform.Security.IRoleSecurityService RoleSecurityService</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">{</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">&#160;&#160;&#160;set</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">&#160;&#160;&#160;&#160;&#160;&#160;{</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get&lt;Sage.Platform.Security.IRoleSecurityService&gt;(true);</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">&#160;&#160;&#160;&#160;&#160;&#160;}</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">&#160;&#160;&#160;&#160;&#160;&#160;get</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">&#160;&#160;&#160;&#160;&#160;&#160;{</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return _roleSecurityService;</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">&#160;&#160;&#160;&#160;&#160;&#160;}</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">}</span></p></td></tr></table> <![CDATA[ ]]></li>
            <li value="3">Check if the logged in user has access before adding event handlers for secured controls. Note that the secured action parameter is not case-sensitive.
          
    
        <p class="Topic-Text-Indent">In this example, the Insert button requires the logged in user to have access to the "ENTITIES/ACCOUNT/EDIT" action.</p><p class="Topic-Text-Lettered">&#160;</p><table style="vertical-align: top;margin-left: auto;margin-right: auto;width: 98%;mc-table-style: url('../Resources/TableStyles/Code.css');" cellspacing="0" bgcolor="#EEEEEE" class="TableStyle-Code"><col style="width: 100%;" class="TableStyle-Code-Column-Column1" /><tr style="vertical-align: top;" class="TableStyle-Code-Body-Body1"><td style="border: Solid 1px #000000;width: 100%;padding-right: 10px;padding-left: 10px;" class="TableStyle-Code-BodyD-Column1-Body1"><p class="code-snippet" style="margin-left: 0px;">protected override void OnWireEventHandlers()</p><p class="code-snippet" style="margin-left: 0px;">{</p><p class="code-snippet" style="margin-left: 0px;">&#160;&#160;&#160;&#160;base.OnWireEventHandlers();</p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;">&#160;&#160;&#160;<span class="SLXBold">&#160;if (_roleSecurityService != null)</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">{</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">if (_roleSecurityService.HasAccess("ENTITIES/ACCOUNT/EDIT"))</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">{</span></p><p class="code-snippet" style="margin-left: 0px;">cmdAddAsset.Click += new ImageClickEventHandler(cmdAddAsset_ClickAction);</p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">}</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">}</span></p><p class="code-snippet" style="margin-left: 0px;">&#160;</p><p class="code-snippet" style="margin-left: 0px;">}</p></td></tr></table></li>
            <p class="code-snippet" style="margin-left: 0px;"><span style="margin-left: 0px;">&#160;&#160;</span>
            </p>
            <li value="4">In the OnFormBound method, make the elements such as controls or grid columns that you want to secure visible only if the logged in user has access.
            
        <p class="Topic-Text-Indent">In this example, the Edit and Delete columns and the Insert button are made visible only if the logged in user has access to the "ENTITIES/ACCOUNT/EDIT" action.</p><br /><table style="vertical-align: top;width: 98%;margin-left: auto;margin-right: auto;mc-table-style: url('../Resources/TableStyles/Code.css');" cellspacing="0" bgcolor="#EEEEEE" class="TableStyle-Code"><col style="width: 100%;" class="TableStyle-Code-Column-Column1" /><tr style="vertical-align: top;" class="TableStyle-Code-Body-Body1"><td style="border: Solid 1px #000000;width: 100%;padding-right: 10px;padding-left: 10px;" class="TableStyle-Code-BodyD-Column1-Body1"><p class="code-snippet" style="margin-left: 0px;">protected override void OnFormBound()</p><p class="code-snippet" style="margin-left: 0px;">{</p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">// Show Edit and Delete columns only if logged in user has access to action.</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">grdAssets.Columns[0].Visible = (_roleSecurityService.HasAccess("Entities/Account/Edit"));</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">grdAssets.Columns[1].Visible = (_roleSecurityService.HasAccess("Entities/Account/Edit"));</span></p><p class="code-snippet" style="margin-left: 0px;">if (dtsAssets.SourceObject == null) { dtsAssets.SourceObject = BindingSource.Current; }</p><p class="code-snippet" style="margin-left: 0px;">if (dtsAssets.SourceObject == null) { RegisterBindingsWithClient(dtsAssets); }</p><p class="code-snippet" style="margin-left: 0px;">dtsAssets.Bind();</p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">// Hide Insert button if logged in user does not have access to action.</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">if (!_roleSecurityService.HasAccess("ENTITIES/ACCOUNT/EDIT"))</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">{</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">cmdAddAsset.Visible = false;</span></p><p class="code-snippet" style="margin-left: 0px;color: #0000ff;"><span class="SLXBold">}</span></p><p class="code-snippet" style="margin-left: 0px;">}</p></td></tr></table></li>
        </ol>
        <p class="RelatedTopics">Related Topics</p>
        <p><a href="PortalExplorer.chm::/Configuring_and_Deploying_Portals/Pages/Understanding_Secured_Actions.htm">Understanding Secured Actions</a>
        </p>
        <p style="margin-left: 40px;">&#160;</p>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>